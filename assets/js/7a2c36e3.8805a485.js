"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7285],{1299:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"protocols","title":"Protocols","description":"class diskurs.protocols.LongtermMemoryHandler(\\\\args, \\\\\\\\*kwargs)","source":"@site/docs/protocols.md","sourceDirName":".","slug":"/protocols","permalink":"/diskurs/docs/protocols","draft":false,"unlisted":false,"editUrl":"https://github.com/agentic-diskurs/diskurs/edit/main/docs-site/docs/protocols.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Module: Prompt","permalink":"/diskurs/docs/prompt"}}');var t=n(4848),o=n(8453);const i={},a="Protocols",l={},c=[{value:"<em>class</em> diskurs.protocols.LongtermMemoryHandler(*args, **kwargs)",id:"class-diskursprotocolslongtermmemoryhandlerargs-kwargs",level:3},{value:"can_finalize(longterm_memory)",id:"can_finalizelongterm_memory",level:4},{value:"<em>class</em> diskurs.protocols.PromptValidator(*args, **kwargs)",id:"class-diskursprotocolspromptvalidatorargs-kwargs",level:3},{value:"<em>classmethod</em> validate_dataclass(parsed_response, user_prompt_argument, strict=False)",id:"classmethod-validate_dataclassparsed_response-user_prompt_argument-strictfalse",level:4},{value:"<em>classmethod</em> validate_json(llm_response)",id:"classmethod-validate_jsonllm_response",level:4},{value:"<em>class</em> diskurs.protocols.Prompt(*args, **kwargs)",id:"class-diskursprotocolspromptargs-kwargs",level:3},{value:"system_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>SystemPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument",level:4},{value:"user_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>UserPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument",level:4},{value:"create_system_prompt_argument(**prompt_args)",id:"create_system_prompt_argumentprompt_args",level:4},{value:"create_user_prompt_argument(**prompt_args)",id:"create_user_prompt_argumentprompt_args",level:4},{value:"render_system_template(name, prompt_args, return_json=True)",id:"render_system_templatename-prompt_args-return_jsontrue",level:4},{value:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)",id:"render_user_templatename-prompt_args-message_typemessagetypeconversation",level:4},{value:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)",id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting",level:4},{value:"<em>class</em> diskurs.protocols.MultistepPrompt(*args, **kwargs)",id:"class-diskursprotocolsmultisteppromptargs-kwargs",level:3},{value:"is_final(user_prompt_argument)",id:"is_finaluser_prompt_argument",level:4},{value:"is_valid(user_prompt_argument)",id:"is_validuser_prompt_argument",level:4},{value:"create_system_prompt_argument(**prompt_args)",id:"create_system_prompt_argumentprompt_args-1",level:4},{value:"create_user_prompt_argument(**prompt_args)",id:"create_user_prompt_argumentprompt_args-1",level:4},{value:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)",id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting-1",level:4},{value:"render_system_template(name, prompt_args, return_json=True)",id:"render_system_templatename-prompt_args-return_jsontrue-1",level:4},{value:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)",id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-1",level:4},{value:"system_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>SystemPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument-1",level:4},{value:"user_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>UserPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument-1",level:4},{value:"<em>class</em> diskurs.protocols.ConductorPrompt(*args, **kwargs)",id:"class-diskursprotocolsconductorpromptargs-kwargs",level:3},{value:"longterm_memory <em>: <code>Type</code>[<code>LongtermMemory</code>]</em>",id:"longterm_memory--typelongtermmemory",level:4},{value:"can_finalize(longterm_memory)",id:"can_finalizelongterm_memory-1",level:4},{value:"finalize(longterm_memory)",id:"finalizelongterm_memory",level:4},{value:"fail(longterm_memory)",id:"faillongterm_memory",level:4},{value:"init_longterm_memory(**kwargs)",id:"init_longterm_memorykwargs",level:4},{value:"is_final(user_prompt_argument)",id:"is_finaluser_prompt_argument-1",level:4},{value:"is_valid(user_prompt_argument)",id:"is_validuser_prompt_argument-1",level:4},{value:"create_system_prompt_argument(**prompt_args)",id:"create_system_prompt_argumentprompt_args-2",level:4},{value:"create_user_prompt_argument(**prompt_args)",id:"create_user_prompt_argumentprompt_args-2",level:4},{value:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)",id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting-2",level:4},{value:"render_system_template(name, prompt_args, return_json=True)",id:"render_system_templatename-prompt_args-return_jsontrue-2",level:4},{value:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)",id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-2",level:4},{value:"system_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>SystemPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument-2",level:4},{value:"user_prompt_argument <em>: <code>Type</code>[<code>TypeVar</code>(<code>UserPromptArg</code>, bound= <code>PromptArgument</code>)]</em>",id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument-2",level:4},{value:"<em>class</em> diskurs.protocols.CallTool(*args, **kwargs)",id:"class-diskursprotocolscalltoolargs-kwargs",level:3},{value:"<em>class</em> diskurs.protocols.HeuristicSequence(*args, **kwargs)",id:"class-diskursprotocolsheuristicsequenceargs-kwargs",level:3},{value:"<em>class</em> diskurs.protocols.HeuristicPrompt(*args, **kwargs)",id:"class-diskursprotocolsheuristicpromptargs-kwargs",level:3},{value:"user_prompt_argument <em>: <code>Type</code>[<code>PromptArgument</code>]</em>",id:"user_prompt_argument--typepromptargument",level:4},{value:"heuristic_sequence(conversation, call_tool)",id:"heuristic_sequenceconversation-call_tool",level:4},{value:"create_user_prompt_argument(**prompt_args)",id:"create_user_prompt_argumentprompt_args-3",level:4},{value:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)",id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-3",level:4},{value:"<em>class</em> diskurs.protocols.Conversation(*args, **kwargs)",id:"class-diskursprotocolsconversationargs-kwargs",level:3},{value:"<em>property</em> chat <em>: List[ChatMessage]</em>",id:"property-chat--listchatmessage",level:4},{value:"<em>property</em> system_prompt <em>: ChatMessage | None</em>",id:"property-system_prompt--chatmessage--none",level:4},{value:"<em>property</em> user_prompt <em>: ChatMessage | None</em>",id:"property-user_prompt--chatmessage--none",level:4},{value:"<em>property</em> system_prompt_argument <em>: SystemPromptArg | None</em>",id:"property-system_prompt_argument--systempromptarg--none",level:4},{value:"<em>property</em> user_prompt_argument <em>: UserPromptArg | None</em>",id:"property-user_prompt_argument--userpromptarg--none",level:4},{value:"<em>property</em> metadata <em>: Dict[str, str]</em>",id:"property-metadata--dictstr-str",level:4},{value:"<em>property</em> last_message <em>: ChatMessage</em>",id:"property-last_message--chatmessage",level:4},{value:"<em>property</em> active_agent <em>: str</em>",id:"property-active_agent--str",level:4},{value:"<em>property</em> conversation_id <em>: str</em>",id:"property-conversation_id--str",level:4},{value:"get_agent_longterm_memory(agent_name)",id:"get_agent_longterm_memoryagent_name",level:4},{value:"update_agent_longterm_memory(agent_name, longterm_memory)",id:"update_agent_longterm_memoryagent_name-longterm_memory",level:4},{value:"update_prompt_argument_with_longterm_memory(conductor_name)",id:"update_prompt_argument_with_longterm_memoryconductor_name",level:4},{value:"update(chat=None, system_prompt_argument=None, user_prompt_argument=None, system_prompt=None, user_prompt=None, longterm_memory=None, metadata=None, active_agent=None)",id:"updatechatnone-system_prompt_argumentnone-user_prompt_argumentnone-system_promptnone-user_promptnone-longterm_memorynone-metadatanone-active_agentnone",level:4},{value:"append(message, role=&#39;&#39;, name=&#39;&#39;)",id:"appendmessage-role-name",level:4},{value:"render_chat(message_type=MessageType.CONVERSATION)",id:"render_chatmessage_typemessagetypeconversation",level:4},{value:"is_empty()",id:"is_empty",level:4},{value:"has_pending_tool_call()",id:"has_pending_tool_call",level:4},{value:"has_pending_tool_response()",id:"has_pending_tool_response",level:4},{value:"<em>classmethod</em> from_dict(data, agents)",id:"classmethod-from_dictdata-agents",level:4},{value:"to_dict()",id:"to_dict",level:4},{value:"<em>class</em> diskurs.protocols.LLMClient(*args, **kwargs)",id:"class-diskursprotocolsllmclientargs-kwargs",level:3},{value:"<em>classmethod</em> create(**kwargs)",id:"classmethod-createkwargs",level:4},{value:"generate(conversation, tools=None)",id:"generateconversation-toolsnone",level:4},{value:"<em>class</em> diskurs.protocols.ConversationParticipant(*args, **kwargs)",id:"class-diskursprotocolsconversationparticipantargs-kwargs",level:3},{value:"topics <em>: <code>list</code>[<code>str</code>]</em>",id:"topics--liststr",level:4},{value:"process_conversation(conversation)",id:"process_conversationconversation",level:4},{value:"register_dispatcher(dispatcher)",id:"register_dispatcherdispatcher",level:4},{value:"<em>class</em> diskurs.protocols.ConversationDispatcher(*args, **kwargs)",id:"class-diskursprotocolsconversationdispatcherargs-kwargs",level:3},{value:"subscribe(topic, participant)",id:"subscribetopic-participant",level:4},{value:"unsubscribe(topic, participant)",id:"unsubscribetopic-participant",level:4},{value:"publish(topic, conversation)",id:"publishtopic-conversation",level:4},{value:"run(participant, conversation)",id:"runparticipant-conversation",level:4},{value:"finalize(response)",id:"finalizeresponse",level:4},{value:"<em>class</em> diskurs.protocols.ConversationStore(*args, **kwargs)",id:"class-diskursprotocolsconversationstoreargs-kwargs",level:3},{value:"<em>classmethod</em> create(**kwargs)",id:"classmethod-createkwargs-1",level:4},{value:"persist(conversation)",id:"persistconversation",level:4},{value:"fetch(conversation_id)",id:"fetchconversation_id",level:4},{value:"delete(conversation_id)",id:"deleteconversation_id",level:4},{value:"exists(conversation_id)",id:"existsconversation_id",level:4},{value:"<em>class</em> diskurs.protocols.Agent(*args, **kwargs)",id:"class-diskursprotocolsagentargs-kwargs",level:3},{value:"name <em>: <code>str</code></em>",id:"name--str",level:4},{value:"<em>classmethod</em> create(name, prompt, llm_client, **kwargs)",id:"classmethod-createname-prompt-llm_client-kwargs",level:4},{value:"invoke(conversation)",id:"invokeconversation",level:4},{value:"<em>class</em> diskurs.protocols.ConductorAgent(*args, **kwargs)",id:"class-diskursprotocolsconductoragentargs-kwargs",level:3},{value:"name <em>: <code>str</code></em>",id:"name--str-1",level:4},{value:"prompt <em>: <code>ConductorPrompt</code></em>",id:"prompt--conductorprompt",level:4},{value:"create_or_update_longterm_memory(conversation, overwrite=False)",id:"create_or_update_longterm_memoryconversation-overwritefalse",level:4},{value:"<em>class</em> diskurs.protocols.ToolExecutor(*args, **kwargs)",id:"class-diskursprotocolstoolexecutorargs-kwargs",level:3},{value:"tools <em>: <code>Dict</code>[<code>str</code>, <code>Callable</code>]</em>",id:"tools--dictstr-callable",level:4},{value:"register_tools(tool_list)",id:"register_toolstool_list",level:4},{value:"execute_tool(tool_call, metadata)",id:"execute_tooltool_call-metadata",level:4},{value:"call_tool(function_name, arguments)",id:"call_toolfunction_name-arguments",level:4}];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"protocols",children:"Protocols"})}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolslongtermmemoryhandlerargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.LongtermMemoryHandler(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.h4,{id:"can_finalizelongterm_memory",children:"can_finalize(longterm_memory)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.em,{children:"Any"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolspromptvalidatorargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.PromptValidator(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for validating prompt responses."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines methods for validating responses from a language model (LLM).\nIt includes methods for validating responses as dataclasses and JSON objects."}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-validate_dataclassparsed_response-user_prompt_argument-strictfalse",children:[(0,t.jsx)(s.em,{children:"classmethod"})," validate_dataclass(parsed_response, user_prompt_argument, strict=False)"]}),"\n",(0,t.jsx)(s.p,{children:"Validates a parsed response dictionary against a dataclass type."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"parsed_response"})," (",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]) \u2013 The dictionary containing the parsed response from the LLM."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"dataclass"}),"]) \u2013 The dataclass type to validate against."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"strict"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 If True, enforce strict validation rules."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dataclass"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the dataclass populated with the validated data."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-validate_jsonllm_response",children:[(0,t.jsx)(s.em,{children:"classmethod"})," validate_json(llm_response)"]}),"\n",(0,t.jsx)(s.p,{children:"Validates a JSON response from a language model (LLM)."}),"\n",(0,t.jsx)(s.p,{children:"This method takes a JSON string response from an LLM and validates it,\nensuring it conforms to the expected structure and content."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"llm_response"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The JSON string response from the LLM."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA dictionary representation of the validated JSON response."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolspromptargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.Prompt(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for prompt implementations."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the structure and methods required for creating and handling prompts\nin a conversation. Implementations of this protocol are responsible for generating prompt\narguments, rendering templates, and parsing responses from a language model (LLM)."}),"\n",(0,t.jsxs)(s.h4,{id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument",children:["system_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsxs)(s.h4,{id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument",children:["user_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsx)(s.h4,{id:"create_system_prompt_argumentprompt_args",children:"create_system_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the system prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the system prompt argument\nbased on the provided keyword arguments. The system prompt argument\nis used to configure the initial state and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the system prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the system prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_user_prompt_argumentprompt_args",children:"create_user_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the user prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the user prompt argument\nbased on the provided keyword arguments. The user prompt argument\nis used to configure the user\u2019s input and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the user prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the user prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_system_templatename-prompt_args-return_jsontrue",children:"render_system_template(name, prompt_args, return_json=True)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the system template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the system template using the given prompt arguments.\nIt can optionally return the rendered template as a JSON object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_json"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 If True, the rendered template will be returned as a JSON object. Defaults to True."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_user_templatename-prompt_args-message_typemessagetypeconversation",children:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the user template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the user template using the given prompt arguments.\nIt generates a ChatMessage object that represents the rendered template."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of the message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting",children:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)"}),"\n",(0,t.jsx)(s.p,{children:"Parses the LLM response into a prompt argument or ChatMessage."}),"\n",(0,t.jsx)(s.p,{children:"This method takes the response from a language model (LLM) and parses it into either a\nPromptArgument or a ChatMessage object. It uses the old user prompt argument and\nthe message type to guide the parsing process."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"llm_response"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The response string from the language model."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"old_user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The previous user prompt argument to be used as a reference."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to be parsed. Defaults to MessageType.ROUTING."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"PromptArgument"}),", ",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA PromptArgument or ChatMessage object based on the parsed response."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsmultisteppromptargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.MultistepPrompt(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Prompt",children:(0,t.jsx)(s.code,{children:"Prompt"})})]}),"\n",(0,t.jsx)(s.h4,{id:"is_finaluser_prompt_argument",children:"is_final(user_prompt_argument)"}),"\n",(0,t.jsx)(s.p,{children:"Determines if the user prompt argument indicates the final state."}),"\n",(0,t.jsx)(s.p,{children:"This method checks the provided user prompt argument to determine if it represents\nthe final state in the conversation. It is used to decide whether the conversation\ncan be concluded based on the user\u2019s input."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The user prompt argument to be evaluated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the user prompt argument indicates the final state, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"is_validuser_prompt_argument",children:"is_valid(user_prompt_argument)"}),"\n",(0,t.jsx)(s.p,{children:"Validates the user prompt argument."}),"\n",(0,t.jsx)(s.p,{children:"This method checks if the provided user prompt argument meets the required\ncriteria for validity. It ensures that the user prompt argument is correctly\nstructured and contains the necessary information for further processing."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The user prompt argument to be validated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the user prompt argument is valid, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_system_prompt_argumentprompt_args-1",children:"create_system_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the system prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the system prompt argument\nbased on the provided keyword arguments. The system prompt argument\nis used to configure the initial state and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the system prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the system prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_user_prompt_argumentprompt_args-1",children:"create_user_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the user prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the user prompt argument\nbased on the provided keyword arguments. The user prompt argument\nis used to configure the user\u2019s input and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the user prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the user prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting-1",children:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)"}),"\n",(0,t.jsx)(s.p,{children:"Parses the LLM response into a prompt argument or ChatMessage."}),"\n",(0,t.jsx)(s.p,{children:"This method takes the response from a language model (LLM) and parses it into either a\nPromptArgument or a ChatMessage object. It uses the old user prompt argument and\nthe message type to guide the parsing process."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"llm_response"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The response string from the language model."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"old_user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The previous user prompt argument to be used as a reference."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to be parsed. Defaults to MessageType.ROUTING."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"PromptArgument"}),", ",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA PromptArgument or ChatMessage object based on the parsed response."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_system_templatename-prompt_args-return_jsontrue-1",children:"render_system_template(name, prompt_args, return_json=True)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the system template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the system template using the given prompt arguments.\nIt can optionally return the rendered template as a JSON object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_json"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 If True, the rendered template will be returned as a JSON object. Defaults to True."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-1",children:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the user template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the user template using the given prompt arguments.\nIt generates a ChatMessage object that represents the rendered template."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of the message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument-1",children:["system_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsxs)(s.h4,{id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument-1",children:["user_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconductorpromptargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ConductorPrompt(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Prompt",children:(0,t.jsx)(s.code,{children:"Prompt"})})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for conductor prompts."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the methods required for handling conductor prompts in a conversation.\nIt includes methods for initializing, finalizing, and validating long-term memory, as well as\ndetermining the final state of the conversation."}),"\n",(0,t.jsxs)(s.h4,{id:"longterm_memory--typelongtermmemory",children:["longterm_memory ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"LongtermMemory"}),"]"]})]}),"\n",(0,t.jsx)(s.h4,{id:"can_finalizelongterm_memory-1",children:"can_finalize(longterm_memory)"}),"\n",(0,t.jsx)(s.p,{children:"Determines if the conductor can finalize based on the long-term memory."}),"\n",(0,t.jsx)(s.p,{children:"This method evaluates the provided long-term memory to decide whether the\nconversation can be concluded. It checks if the necessary conditions are met\nfor finalizing the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.code,{children:"LongtermMemory"}),") \u2013 The long-term memory to be evaluated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the conversation can be finalized, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"finalizelongterm_memory",children:"finalize(longterm_memory)"}),"\n",(0,t.jsx)(s.p,{children:"Finalizes the conversation based on the long-term memory."}),"\n",(0,t.jsx)(s.p,{children:"This method processes the provided long-term memory to generate a final response\nfor the conversation. It is responsible for concluding the conversation by\nutilizing the accumulated long-term memory data."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.code,{children:"LongtermMemory"}),") \u2013 The long-term memory to be used for finalizing the conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA dictionary containing the final response data."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"faillongterm_memory",children:"fail(longterm_memory)"}),"\n",(0,t.jsx)(s.p,{children:"Handles the case failure i.e. when the long-term memory does not meet the criteria defined\nfor finalization."}),"\n",(0,t.jsx)(s.p,{children:"This method processes the provided long-term memory to generate a failure response\nfor the conversation. It is responsible for concluding the conversation in a failure\nstate by utilizing the accumulated long-term memory data."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.code,{children:"LongtermMemory"}),") \u2013 The long-term memory to be used for generating the failure response."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA dictionary containing the failure response data."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"init_longterm_memorykwargs",children:"init_longterm_memory(**kwargs)"}),"\n",(0,t.jsx)(s.p,{children:"Initializes the long-term memory."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for creating and initializing the long-term memory\nfor the conductor agent. It uses the provided keyword arguments to set up the\ninitial state of the long-term memory."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"kwargs"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the long-term memory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"LongtermMemory"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the LongtermMemory class."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"is_finaluser_prompt_argument-1",children:"is_final(user_prompt_argument)"}),"\n",(0,t.jsx)(s.p,{children:"Determines if the user prompt argument indicates the final state."}),"\n",(0,t.jsx)(s.p,{children:"This method checks the provided user prompt argument to determine if it represents\nthe final state in the conversation. It is used to decide whether the conversation\ncan be concluded based on the user\u2019s input."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The user prompt argument to be evaluated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the user prompt argument indicates the final state, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"is_validuser_prompt_argument-1",children:"is_valid(user_prompt_argument)"}),"\n",(0,t.jsx)(s.p,{children:"Validates the user prompt argument."}),"\n",(0,t.jsx)(s.p,{children:"This method checks if the provided user prompt argument meets the required\ncriteria for validity. It ensures that the user prompt argument is correctly\nstructured and contains the necessary information for further processing."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The user prompt argument to be validated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the user prompt argument is valid, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_system_prompt_argumentprompt_args-2",children:"create_system_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the system prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the system prompt argument\nbased on the provided keyword arguments. The system prompt argument\nis used to configure the initial state and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the system prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the system prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_user_prompt_argumentprompt_args-2",children:"create_user_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the user prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the user prompt argument\nbased on the provided keyword arguments. The user prompt argument\nis used to configure the user\u2019s input and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"Any"}),") \u2013 Keyword arguments used to initialize the user prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the user prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"parse_user_promptllm_response-old_user_prompt_argument-message_typemessagetyperouting-2",children:"parse_user_prompt(llm_response, old_user_prompt_argument, message_type=MessageType.ROUTING)"}),"\n",(0,t.jsx)(s.p,{children:"Parses the LLM response into a prompt argument or ChatMessage."}),"\n",(0,t.jsx)(s.p,{children:"This method takes the response from a language model (LLM) and parses it into either a\nPromptArgument or a ChatMessage object. It uses the old user prompt argument and\nthe message type to guide the parsing process."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"llm_response"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The response string from the language model."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"old_user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The previous user prompt argument to be used as a reference."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to be parsed. Defaults to MessageType.ROUTING."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"PromptArgument"}),", ",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA PromptArgument or ChatMessage object based on the parsed response."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_system_templatename-prompt_args-return_jsontrue-2",children:"render_system_template(name, prompt_args, return_json=True)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the system template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the system template using the given prompt arguments.\nIt can optionally return the rendered template as a JSON object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_json"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 If True, the rendered template will be returned as a JSON object. Defaults to True."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-2",children:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the user template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the user template using the given prompt arguments.\nIt generates a ChatMessage object that represents the rendered template."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of the message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"system_prompt_argument--typetypevarsystempromptarg-bound-promptargument-2",children:["system_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsxs)(s.h4,{id:"user_prompt_argument--typetypevaruserpromptarg-bound-promptargument-2",children:["user_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]"]})]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolscalltoolargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.CallTool(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsheuristicsequenceargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.HeuristicSequence(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsheuristicpromptargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.HeuristicPrompt(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for heuristic prompts."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the structure and methods required for creating and handling heuristic prompts\nin a conversation. Implementations of this protocol are responsible for generating user prompt arguments,\nrendering user templates, and executing heuristic sequences to process conversations."}),"\n",(0,t.jsxs)(s.h4,{id:"user_prompt_argument--typepromptargument",children:["user_prompt_argument ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Type"}),"[",(0,t.jsx)(s.code,{children:"PromptArgument"}),"]"]})]}),"\n",(0,t.jsx)(s.h4,{id:"heuristic_sequenceconversation-call_tool",children:"heuristic_sequence(conversation, call_tool)"}),"\n",(0,t.jsx)(s.p,{children:"Executes a heuristic sequence on the given conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method processes the conversation using a series of heuristic steps,\noptionally utilizing a tool for specific operations. The heuristic sequence\nis designed to guide the conversation towards a desired outcome based on\npredefined rules and logic."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The conversation object to be processed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"call_tool"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.CallTool",children:(0,t.jsx)(s.code,{children:"CallTool"})}),") \u2013 An optional callable tool that can be used during the heuristic sequence."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe updated conversation object after processing the heuristic sequence."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"create_user_prompt_argumentprompt_args-3",children:"create_user_prompt_argument(**prompt_args)"}),"\n",(0,t.jsx)(s.p,{children:"Creates an instance of the user prompt argument dataclass."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for generating the user prompt argument\nbased on the provided keyword arguments. The user prompt argument\nis used to configure the user\u2019s input and context for the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"prompt_args"})," \u2013 Keyword arguments used to initialize the user prompt argument."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"PromptArgument"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn instance of the user prompt argument dataclass."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_user_templatename-prompt_args-message_typemessagetypeconversation-3",children:"render_user_template(name, prompt_args, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Renders the user template with the provided prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for rendering the user template using the given prompt arguments.\nIt generates a ChatMessage object that represents the rendered template."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the template to be rendered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt_args"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The prompt arguments to be used for rendering the template."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of the message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ChatMessage"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ChatMessage object containing the rendered template."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconversationargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.Conversation(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"}),"[",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", ",(0,t.jsx)(s.code,{children:"UserPromptArg"}),"]"]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for conversation management."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the structure and methods required for handling conversations\nbetween agents and users. It includes properties and methods for accessing and updating\nchat messages, prompt arguments, long-term memory, and metadata. Implementations of this\nprotocol are responsible for managing the state and flow of conversations, ensuring\nimmutability, and providing mechanisms for rendering and parsing prompts."}),"\n",(0,t.jsxs)(s.h4,{id:"property-chat--listchatmessage",children:[(0,t.jsx)(s.em,{children:"property"})," chat ",(0,t.jsx)(s.em,{children:": List[ChatMessage]"})]}),"\n",(0,t.jsx)(s.p,{children:"Provides a deep copy of the chat messages to ensure immutability."}),"\n",(0,t.jsx)(s.p,{children:"This method returns a list of ChatMessage objects representing the conversation\u2019s chat history.\nThe returned list is a deep copy, ensuring that the original chat messages remain unchanged."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA deep copy of the list of chat messages."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\nList[ChatMessage]"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-system_prompt--chatmessage--none",children:[(0,t.jsx)(s.em,{children:"property"})," system_prompt ",(0,t.jsx)(s.em,{children:": ChatMessage | None"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the system prompt of the conversation."}),"\n",(0,t.jsx)(s.p,{children:"The system prompt is a message that sets the initial context or instructions for the conversation.\nIt is typically used to guide the conversation\u2019s flow and provide necessary background information.\nEach time an agent takes a turn in the conversation, it updates the system prompt accordingly."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe system prompt message if available, otherwise None."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-user_prompt--chatmessage--none",children:[(0,t.jsx)(s.em,{children:"property"})," user_prompt ",(0,t.jsx)(s.em,{children:": ChatMessage | None"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the user prompt of the conversation."}),"\n",(0,t.jsx)(s.p,{children:"The user prompt is a message that represents the user\u2019s input or query in the conversation.\nIt is typically used to direct the agent\u2019s next response.\nEach time an agent takes a turn in the conversation, it updates the user prompt accordingly."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe user prompt message if available, otherwise None."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-system_prompt_argument--systempromptarg--none",children:[(0,t.jsx)(s.em,{children:"property"})," system_prompt_argument ",(0,t.jsx)(s.em,{children:": SystemPromptArg | None"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the system prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"The system prompt argument is used to render the system prompt message.\nEach time an agent takes a turn in the conversation, it updates the system prompt argument."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe system prompt arguments if available, otherwise None."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-user_prompt_argument--userpromptarg--none",children:[(0,t.jsx)(s.em,{children:"property"})," user_prompt_argument ",(0,t.jsx)(s.em,{children:": UserPromptArg | None"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the user prompt arguments."}),"\n",(0,t.jsx)(s.p,{children:"The user prompt argument is used to render the user prompt message.\nEach time an agent takes a turn in the conversation, it updates the user prompt argument."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe user prompt arguments if available, otherwise None."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-metadata--dictstr-str",children:[(0,t.jsx)(s.em,{children:"property"})," metadata ",(0,t.jsx)(s.em,{children:": Dict[str, str]"})]}),"\n",(0,t.jsx)(s.p,{children:"Provides a deep copy of the metadata dictionary to ensure immutability."}),"\n",(0,t.jsx)(s.p,{children:"The metadata dictionary contains additional information about the conversation,\nand can be freely defined and updated by the implementing system."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA deep copy of the metadata dictionary."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-last_message--chatmessage",children:[(0,t.jsx)(s.em,{children:"property"})," last_message ",(0,t.jsx)(s.em,{children:": ChatMessage"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the last message in the conversation."}),"\n",(0,t.jsx)(s.p,{children:"This property returns the most recent ChatMessage object from the conversation\u2019s chat history.\nIt is used to access the latest message exchanged in the conversation, which can be useful for\ndetermining the current state or context of the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe last message in the chat."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\nChatMessage"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-active_agent--str",children:[(0,t.jsx)(s.em,{children:"property"})," active_agent ",(0,t.jsx)(s.em,{children:": str"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the name of the active agent."}),"\n",(0,t.jsx)(s.p,{children:"The active agent is the agent currently responsible for processing the conversation.\nThis method returns the name of the active agent as a string."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe name of the active agent."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\nstr"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"property-conversation_id--str",children:[(0,t.jsx)(s.em,{children:"property"})," conversation_id ",(0,t.jsx)(s.em,{children:": str"})]}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the unique identifier for the conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method returns the conversation ID, which is a unique string\nused to identify the conversation instance. The conversation ID\nis typically used for tracking and managing conversations within\nthe system."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe unique identifier for the conversation."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"get_agent_longterm_memoryagent_name",children:"get_agent_longterm_memory(agent_name)"}),"\n",(0,t.jsx)(s.p,{children:"Provides a deep copy of the long-term memory for the specified agent."}),"\n",(0,t.jsx)(s.p,{children:"This method retrieves the long-term memory associated with a given agent name.\nAllowing the caller to safely modify the returned memory without affecting the original."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"agent_name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the agent whose long-term memory is to be retrieved."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"LongtermMemory"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA deep copy of the agent\u2019s long-term memory, or None if no memory is found."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"update_agent_longterm_memoryagent_name-longterm_memory",children:"update_agent_longterm_memory(agent_name, longterm_memory)"}),"\n",(0,t.jsx)(s.p,{children:"Updates the long-term memory for a specific agent."}),"\n",(0,t.jsx)(s.p,{children:"This method updates the long-term memory associated with the given agent name.\nIt returns a new instance of the Conversation with the updated long-term memory,\nensuring immutability of the conversation state."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"agent_name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the agent whose long-term memory is to be updated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.code,{children:"LongtermMemory"}),") \u2013 The new long-term memory for the agent."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA new instance of the Conversation with updated long-term memory."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"update_prompt_argument_with_longterm_memoryconductor_name",children:"update_prompt_argument_with_longterm_memory(conductor_name)"}),"\n",(0,t.jsx)(s.p,{children:"Updates the prompt arguments with the long-term memory of the conductor agent."}),"\n",(0,t.jsx)(s.p,{children:"This method retrieves the long-term memory associated with the specified conductor agent\nand updates the prompt arguments of the conversation accordingly. It ensures that the\nconversation\u2019s state is updated with the relevant long-term memory data, preserving\nimmutability by returning a new instance of the Conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conductor_name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the conductor agent whose long-term memory is to be used."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA new instance of the Conversation with updated prompt arguments."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"updatechatnone-system_prompt_argumentnone-user_prompt_argumentnone-system_promptnone-user_promptnone-longterm_memorynone-metadatanone-active_agentnone",children:"update(chat=None, system_prompt_argument=None, user_prompt_argument=None, system_prompt=None, user_prompt=None, longterm_memory=None, metadata=None, active_agent=None)"}),"\n",(0,t.jsx)(s.p,{children:"Returns a new instance of Conversation with updated fields, preserving immutability."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"chat"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"List"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]]) \u2013 Optional list of ChatMessage objects representing the conversation\u2019s chat history."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"system_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"SystemPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]) \u2013 Optional system prompt argument to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"TypeVar"}),"(",(0,t.jsx)(s.code,{children:"UserPromptArg"}),", bound= ",(0,t.jsx)(s.code,{children:"PromptArgument"}),")]) \u2013 Optional user prompt argument to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"system_prompt"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]) \u2013 Optional system prompt message to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"user_prompt"})," (",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),", ",(0,t.jsx)(s.code,{children:"List"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),"], ",(0,t.jsx)(s.code,{children:"None"}),"]) \u2013 Optional user prompt message(s) to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"longterm_memory"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"LongtermMemory"}),"]]) \u2013 Optional dictionary of long-term memory to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"metadata"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"str"}),"]]) \u2013 Optional dictionary of metadata to update."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"active_agent"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"str"}),"]) \u2013 Optional name of the active agent to update."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA new instance of the Conversation class with updated fields."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"appendmessage-role-name",children:"append(message, role='', name='')"}),"\n",(0,t.jsx)(s.p,{children:"Appends a new chat message and returns a new instance of Conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message"})," (",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),", ",(0,t.jsx)(s.code,{children:"List"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),"], ",(0,t.jsx)(s.code,{children:"str"}),"]) \u2013 The message to be added."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"role"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"str"}),"]) \u2013 The role of the message sender."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"str"}),"]) \u2013 The name of the message sender."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA new instance of Conversation with the appended message."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"render_chatmessage_typemessagetypeconversation",children:"render_chat(message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Returns the complete chat with the system prompt prepended and the user prompt appended."}),"\n",(0,t.jsx)(s.p,{children:"This method generates a list of ChatMessage objects representing the full chat history.\nIt includes the system prompt at the beginning and the user prompt at the end of the chat."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"List"}),"[",(0,t.jsx)(s.code,{children:"ChatMessage"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA list representing the full chat."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"is_empty",children:"is_empty()"}),"\n",(0,t.jsx)(s.p,{children:"Checks if the chat is empty."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the chat is empty, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"has_pending_tool_call",children:"has_pending_tool_call()"}),"\n",(0,t.jsx)(s.p,{children:"Checks if there is a pending tool call in the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if there is a pending tool call, False otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"has_pending_tool_response",children:"has_pending_tool_response()"}),"\n",(0,t.jsx)(s.p,{children:"Checks if there is a pending tool response in the conversation,\nthis would be the case if the last message was a tool call from\nthe LLM."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if there is a pending tool response, False otherwise."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-from_dictdata-agents",children:[(0,t.jsx)(s.em,{children:"classmethod"})," from_dict(data, agents)"]}),"\n",(0,t.jsx)(s.p,{children:"Creates a Conversation instance from a dictionary."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"data"})," (",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]) \u2013 The data dictionary."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"agents"})," (",(0,t.jsx)(s.code,{children:"list"}),"[",(0,t.jsx)(s.code,{children:"Any"}),"]) \u2013 A list of agent instances."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA new instance of Conversation."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"to_dict",children:"to_dict()"}),"\n",(0,t.jsx)(s.p,{children:"Converts the Conversation instance to a dictionary."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA dictionary representation of the Conversation."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsllmclientargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.LLMClient(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for interacting with a Language Model (LLM) client.\nThis protocol defines the methods required for creating and generating responses\nfrom a language model within a conversation. Implementations of this protocol\nare responsible for initializing the LLM client and generating responses based\non the current state of the conversation and optional tools."}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-createkwargs",children:[(0,t.jsx)(s.em,{children:"classmethod"})," create(**kwargs)"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Self"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"generateconversation-toolsnone",children:"generate(conversation, tools=None)"}),"\n",(0,t.jsx)(s.p,{children:"Generates a response from the language model (LLM) based on the current state of the conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method takes the current conversation and optionally a list of tools, and generates a response\nfrom the language model. The response is integrated into the conversation, updating its state."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The current state of the conversation, represented as a Conversation object."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"tools"})," (",(0,t.jsx)(s.code,{children:"Optional"}),"[",(0,t.jsx)(s.code,{children:"list"}),"[",(0,t.jsx)(s.code,{children:"ToolDescription"}),"]]) \u2013 An optional list of ToolDescription objects that can be used by the LLM to generate the response."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn updated Conversation object with the generated response."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconversationparticipantargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ConversationParticipant(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for conversation participants."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the methods and properties required for an entity to participate in a conversation.\nImplementations of this protocol are responsible for processing conversations, registering dispatchers,\nand handling topics of interest. It ensures that any participant can actively engage in and manage\nconversations within the system."}),"\n",(0,t.jsxs)(s.h4,{id:"topics--liststr",children:["topics ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"list"}),"[",(0,t.jsx)(s.code,{children:"str"}),"]"]})]}),"\n",(0,t.jsx)(s.h4,{id:"process_conversationconversation",children:"process_conversation(conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Actively participate in a conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for processing the given conversation. The implementation should  handle\nthe conversation appropriately, updating its state and generating responses as needed.\nThis method is called by the conversation dispatcher."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The conversation to be processed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"register_dispatcherdispatcher",children:"register_dispatcher(dispatcher)"}),"\n",(0,t.jsx)(s.p,{children:"Registers a dispatcher with the conversation participant."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for associating a ConversationDispatcher with the\nconversation participant. The dispatcher will handle the distribution and management\nof conversations involving this participant."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"dispatcher"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.ConversationDispatcher",children:(0,t.jsx)(s.code,{children:"ConversationDispatcher"})}),") \u2013 The ConversationDispatcher instance to be registered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconversationdispatcherargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ConversationDispatcher(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for  dispatching conversations."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the methods required for subscribing participants to topics,\npublishing conversations to subscribed participants, and finalizing conversations.\nImplementations of this protocol are responsible for coordinating the flow of conversations\nbetween agents and participants, ensuring that conversations are properly managed and\ndispatched to the appropriate entities based on their topics of interest."}),"\n",(0,t.jsx)(s.h4,{id:"subscribetopic-participant",children:"subscribe(topic, participant)"}),"\n",(0,t.jsx)(s.p,{children:"Subscribe a participant to a specific topic."}),"\n",(0,t.jsx)(s.p,{children:"This method registers a ConversationParticipant to receive conversations\nrelated to the specified topic. When a conversation is published to the topic,\nall subscribed participants will be notified and can process the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"topic"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The topic to which the participant will be subscribed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"participant"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.ConversationParticipant",children:(0,t.jsx)(s.code,{children:"ConversationParticipant"})}),") \u2013 The participant to be subscribed to the topic."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"unsubscribetopic-participant",children:"unsubscribe(topic, participant)"}),"\n",(0,t.jsx)(s.p,{children:"Unsubscribe a participant from a specific topic."}),"\n",(0,t.jsx)(s.p,{children:"This method removes a ConversationParticipant from the list of subscribers for the given topic.\nOnce unsubscribed, the participant will no longer receive conversations related to that topic."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"topic"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The topic from which the participant will be unsubscribed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"participant"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.ConversationParticipant",children:(0,t.jsx)(s.code,{children:"ConversationParticipant"})}),") \u2013 The participant to be unsubscribed from the topic."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"publishtopic-conversation",children:"publish(topic, conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Dispatch a conversation to all participants subscribed to the topic."}),"\n",(0,t.jsx)(s.p,{children:"This method sends the given conversation to all participants who are subscribed\nto the specified topic. Each participant will receive the conversation and can\nprocess it accordingly."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"topic"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The topic to which the conversation will be published."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The conversation to be dispatched."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"runparticipant-conversation",children:"run(participant, conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Entry point for starting a conversation with a participant."}),"\n",(0,t.jsx)(s.p,{children:"This method starts a conversation by dispatching it to the participant, passed into it.\nIt also handles the finalization of the conversation, as soon as the future object is set.\nreturns a dictionary containing the final response data."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"participant"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.ConversationParticipant",children:(0,t.jsx)(s.code,{children:"ConversationParticipant"})}),") \u2013 The ConversationParticipant that is involved in the conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The Conversation object representing the current state of the conversation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA dictionary containing the final response data."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"finalizeresponse",children:"finalize(response)"}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for ending the conversation by setting the future object."}),"\n",(0,t.jsx)(s.p,{children:"It is called when the conversation is finalized, and sets the dictionary response as the result\nwhich is eventually returned by the future object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"response"})," (",(0,t.jsx)(s.code,{children:"dict"}),") \u2013 A dictionary containing the final response data for the conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconversationstoreargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ConversationStore(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"Protocol for managing the persistence of conversations."}),"\n",(0,t.jsx)(s.p,{children:"This protocol defines the methods required for creating, persisting, fetching, deleting, and checking\nthe existence of conversations.\nImplementations of this protocol are responsible for handling the storage and retrieval of conversation data,\nensuring that conversations can be reliably saved and accessed as needed."}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-createkwargs-1",children:[(0,t.jsx)(s.em,{children:"classmethod"})," create(**kwargs)"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Self"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"persistconversation",children:"persist(conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Persists the given conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for saving the state of the provided conversation\nto a persistent storage. Implementations of this method should ensure that\nthe conversation data is reliably stored and can be retrieved later."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The Conversation object representing the current state of the conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"fetchconversation_id",children:"fetch(conversation_id)"}),"\n",(0,t.jsx)(s.p,{children:"Fetches a conversation by its unique identifier."}),"\n",(0,t.jsx)(s.p,{children:"This method retrieves the conversation associated with the given conversation ID from the persistent storage.\nIt ensures that the conversation data is accurately fetched and returned as a Conversation object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation_id"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to be fetched."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe Conversation object representing the fetched conversation."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"deleteconversation_id",children:"delete(conversation_id)"}),"\n",(0,t.jsx)(s.p,{children:"Deletes a conversation by its unique identifier."}),"\n",(0,t.jsx)(s.p,{children:"This method removes the conversation associated with the given conversation ID from the persistent storage.\nIt ensures that the conversation data is permanently deleted and can no longer be retrieved."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation_id"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to be deleted."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nNone"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"existsconversation_id",children:"exists(conversation_id)"}),"\n",(0,t.jsx)(s.p,{children:"Checks if a conversation with the given unique identifier exists in the persistent storage."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for verifying the existence of a conversation by its unique ID.\nIt returns a boolean value indicating whether the conversation is present in the storage."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation_id"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to check."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"bool"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the conversation exists, False otherwise."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsagentargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.Agent(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"The Agent protocol defines the core interface for agents within the Diskurs framework."}),"\n",(0,t.jsx)(s.p,{children:"Agents are central to the Diskurs system, responsible for processing conversations and\ngenerating responses based on the current state of the conversation. Implementations of\nthis protocol must provide methods for creating agents and invoking their logic on\nconversations. Agents interact with various components such as prompts, long-term memory,\nand language model clients to facilitate meaningful and context-aware dialogues."}),"\n",(0,t.jsx)(s.p,{children:"Key Responsibilities:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Creating and initializing agents with specific configurations."}),"\n",(0,t.jsx)(s.li,{children:"Processing conversations by invoking the agent\u2019s logic."}),"\n",(0,t.jsx)(s.li,{children:"Interacting with prompts and long-term memory to maintain conversation context."}),"\n",(0,t.jsx)(s.li,{children:"Generating responses using language model clients."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"This protocol ensures that any implementing class can seamlessly integrate into the\nDiskurs framework, enabling flexible and extensible conversation management."}),"\n",(0,t.jsxs)(s.h4,{id:"name--str",children:["name ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"str"})]})]}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-createname-prompt-llm_client-kwargs",children:[(0,t.jsx)(s.em,{children:"classmethod"})," create(name, prompt, llm_client, **kwargs)"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.em,{children:"str"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Prompt",children:(0,t.jsx)(s.em,{children:"Prompt"})}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"llm_client"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.LLMClient",children:(0,t.jsx)(s.em,{children:"LLMClient"})}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"invokeconversation",children:"invoke(conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Run the agent on a conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method processes the given conversation by invoking the agent\u2019s logic.\nIt takes a Conversation object representing the conversation\nand returns an updated Conversation object after processing."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The current state of the conversation, represented as a Conversation object"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn updated Conversation object with the processed state."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolsconductoragentargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ConductorAgent(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"The ConductorAgent protocol defines the interface for agents that manage and coordinate conversations.\nConductor agents are responsible for creating or updating long-term memory, invoking conversation logic,\nand ensuring the conversation progresses smoothly. They are responsible for dispatching conversation to the\nmost appropriate agents to maintain context and generate responses. This protocol ensures that any\nimplementing class can effectively manage and direct conversations."}),"\n",(0,t.jsxs)(s.h4,{id:"name--str-1",children:["name ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"str"})]})]}),"\n",(0,t.jsxs)(s.h4,{id:"prompt--conductorprompt",children:["prompt ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.a,{href:"#diskurs.protocols.ConductorPrompt",children:(0,t.jsx)(s.code,{children:"ConductorPrompt"})})]})]}),"\n",(0,t.jsx)(s.h4,{id:"create_or_update_longterm_memoryconversation-overwritefalse",children:"create_or_update_longterm_memory(conversation, overwrite=False)"}),"\n",(0,t.jsx)(s.p,{children:"Creates or updates the long-term memory for the conductor agent."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for either creating a new long-term memory instance\nor updating an existing one based on the provided conversation. It ensures that\nthe long-term memory is synchronized with the current state of the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The current state of the conversation, represented as a Conversation object."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"overwrite"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 A boolean flag indicating whether to overwrite existing memory fields. Defaults to False."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn updated Conversation object with the new or updated long-term memory."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursprotocolstoolexecutorargs-kwargs",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.protocols.ToolExecutor(*args, **kwargs)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"Protocol"})]}),"\n",(0,t.jsx)(s.p,{children:"The ToolExecutor protocol defines the interface for executing tools within the Diskurs framework.\nImplementations of this protocol are responsible for registering tools, executing them based on tool calls,\nand providing a mechanism to directly call specific tool functions. This protocol ensures that any implementing\nclass can manage and execute tools effectively, facilitating the integration of various tools into the conversation\nprocessing workflow."}),"\n",(0,t.jsxs)(s.h4,{id:"tools--dictstr-callable",children:["tools ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Callable"}),"]"]})]}),"\n",(0,t.jsx)(s.h4,{id:"register_toolstool_list",children:"register_tools(tool_list)"}),"\n",(0,t.jsx)(s.p,{children:"Registers one or more tools with the executor."}),"\n",(0,t.jsx)(s.p,{children:"This method allows the registration of a single tool or a list of tools\nthat can be executed by the executor. Each tool is a callable that can\nbe invoked with specific arguments."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"tool_list"})," (",(0,t.jsx)(s.code,{children:"Union"}),"[",(0,t.jsx)(s.code,{children:"List"}),"[",(0,t.jsx)(s.code,{children:"Callable"}),"], ",(0,t.jsx)(s.code,{children:"Callable"}),"]) \u2013 A single callable or a list of callables representing the tools to be registered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"execute_tooltool_call-metadata",children:"execute_tool(tool_call, metadata)"}),"\n",(0,t.jsx)(s.p,{children:"Executes a registered tool based on the provided tool call and metadata."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for invoking a specific tool using the details\nprovided in the tool_call object. It utilizes the metadata to provide\nadditional context or parameters required for the tool execution. The result\nof the tool execution is returned as a ToolCallResult object."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"tool_call"})," (",(0,t.jsx)(s.code,{children:"ToolCall"}),") \u2013 The ToolCall object containing the details of the tool to be executed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"metadata"})," (",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]) \u2013 A dictionary containing additional context or parameters for the tool execution."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"ToolCallResult"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA ToolCallResult object containing the result of the tool execution."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"call_toolfunction_name-arguments",children:"call_tool(function_name, arguments)"}),"\n",(0,t.jsx)(s.p,{children:"Calls a registered tool with the specified function name and arguments."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for invoking a tool that has been registered with the executor.\nIt uses the provided function name and arguments to execute the tool and returns the result.\nIt is meant to be used by a developer to directly call a specific tool function withing a\nheuristic sequence."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"function_name"})," (",(0,t.jsx)(s.code,{children:"str"}),") \u2013 The name of the tool function to be called."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"arguments"})," (",(0,t.jsx)(s.code,{children:"Dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]) \u2013 A dictionary containing the arguments to be passed to the tool function."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Any"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe result of the tool function execution."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var r=n(6540);const t={},o=r.createContext(t);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);