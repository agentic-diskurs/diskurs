"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6539],{1823:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"filesystem_conversation_store","title":"Module: Filesystem Conversation Store","description":"class diskurs.filesystemconversationstore.FilesystemConversationStore(directory, agents, conversation_class)","source":"@site/docs/filesystem_conversation_store.md","sourceDirName":".","slug":"/filesystem_conversation_store","permalink":"/diskurs/docs/filesystem_conversation_store","draft":false,"unlisted":false,"editUrl":"https://github.com/agentic-diskurs/diskurs/edit/main/docs-site/docs/filesystem_conversation_store.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Module: Dispatcher","permalink":"/diskurs/docs/dispatcher"},"next":{"title":"Module: Heuristic Agent","permalink":"/diskurs/docs/heuristic_agent"}}');var r=n(4848),i=n(8453);const o={},c="Module: Filesystem Conversation Store",d={},l=[{value:"<em>class</em> diskurs.filesystem_conversation_store.FilesystemConversationStore(directory, agents, conversation_class)",id:"class-diskursfilesystem_conversation_storefilesystemconversationstoredirectory-agents-conversation_class",level:3},{value:"<em>classmethod</em> create(**kwargs)",id:"classmethod-createkwargs",level:4},{value:"persist(conversation)",id:"persistconversation",level:4},{value:"fetch(conversation_id)",id:"fetchconversation_id",level:4},{value:"delete(conversation_id)",id:"deleteconversation_id",level:4},{value:"exists(conversation_id)",id:"existsconversation_id",level:4}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"module-filesystem-conversation-store",children:"Module: Filesystem Conversation Store"})}),"\n",(0,r.jsxs)(s.h3,{id:"class-diskursfilesystem_conversation_storefilesystemconversationstoredirectory-agents-conversation_class",children:[(0,r.jsx)(s.em,{children:"class"})," diskurs.filesystem_conversation_store.FilesystemConversationStore(directory, agents, conversation_class)"]}),"\n",(0,r.jsxs)(s.p,{children:["Bases: ",(0,r.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConversationStore",children:(0,r.jsx)(s.code,{children:"ConversationStore"})})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"directory"})," (",(0,r.jsx)(s.em,{children:"Path"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"agents"})," (",(0,r.jsx)(s.em,{children:"list"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"conversation_class"})," (",(0,r.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,r.jsx)(s.em,{children:"Conversation"})}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.h4,{id:"classmethod-createkwargs",children:[(0,r.jsx)(s.em,{children:"classmethod"})," create(**kwargs)"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Return type:"}),"\n",(0,r.jsx)(s.code,{children:"Self"})]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"persistconversation",children:"persist(conversation)"}),"\n",(0,r.jsx)(s.p,{children:"Persists the given conversation."}),"\n",(0,r.jsx)(s.p,{children:"This method is responsible for saving the state of the provided conversation\nto a persistent storage. Implementations of this method should ensure that\nthe conversation data is reliably stored and can be retrieved later."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(s.strong,{children:"conversation"})," (",(0,r.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,r.jsx)(s.code,{children:"Conversation"})}),") \u2013 The Conversation object representing the current state of the conversation."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Return type:"}),"\n",(0,r.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"fetchconversation_id",children:"fetch(conversation_id)"}),"\n",(0,r.jsx)(s.p,{children:"Fetches a conversation by its unique identifier."}),"\n",(0,r.jsx)(s.p,{children:"This method retrieves the conversation associated with the given conversation ID from the persistent storage.\nIt ensures that the conversation data is accurately fetched and returned as a Conversation object."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(s.strong,{children:"conversation_id"})," (",(0,r.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to be fetched."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Return type:"}),"\n",(0,r.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,r.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Returns:"}),"\nThe Conversation object representing the fetched conversation."]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"deleteconversation_id",children:"delete(conversation_id)"}),"\n",(0,r.jsx)(s.p,{children:"Deletes a conversation by its unique identifier."}),"\n",(0,r.jsx)(s.p,{children:"This method removes the conversation associated with the given conversation ID from the persistent storage.\nIt ensures that the conversation data is permanently deleted and can no longer be retrieved."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(s.strong,{children:"conversation_id"})," (",(0,r.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to be deleted."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Return type:"}),"\n",(0,r.jsx)(s.code,{children:"None"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Returns:"}),"\nNone"]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"existsconversation_id",children:"exists(conversation_id)"}),"\n",(0,r.jsx)(s.p,{children:"Checks if a conversation with the given unique identifier exists in the persistent storage."}),"\n",(0,r.jsx)(s.p,{children:"This method is responsible for verifying the existence of a conversation by its unique ID.\nIt returns a boolean value indicating whether the conversation is present in the storage."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(s.strong,{children:"conversation_id"})," (",(0,r.jsx)(s.code,{children:"str"}),") \u2013 The unique identifier of the conversation to check."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Return type:"}),"\n",(0,r.jsx)(s.code,{children:"bool"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Returns:"}),"\nTrue if the conversation exists, False otherwise."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var t=n(6540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);