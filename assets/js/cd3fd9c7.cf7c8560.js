"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[3078],{1218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"immutable_conversation","title":"Module: Immutable Conversation","description":"class diskurs.immutableconversation.ImmutableConversation(systemprompt=None, userprompt=None, systempromptargument=None, userpromptargument=None, chat=None, longtermmemory=None, metadata=None, activeagent=\'\', conversationid=\'\')","source":"@site/docs/immutable_conversation.md","sourceDirName":".","slug":"/immutable_conversation","permalink":"/diskurs/docs/immutable_conversation","draft":false,"unlisted":false,"editUrl":"https://github.com/agentic-diskurs/diskurs/edit/main/docs-site/docs/immutable_conversation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Module: Heuristic Agent","permalink":"/diskurs/docs/heuristic_agent"},"next":{"title":"Welcome to Diskurs\u2019s documentation!","permalink":"/diskurs/docs/"}}');var r=t(4848),i=t(8453);const o={},a="Module: Immutable Conversation",l={},d=[{value:"<em>class</em> diskurs.immutable_conversation.ImmutableConversation(system_prompt=None, user_prompt=None, system_prompt_argument=None, user_prompt_argument=None, chat=None, longterm_memory=None, metadata=None, active_agent=&#39;&#39;, conversation_id=&#39;&#39;)",id:"class-diskursimmutable_conversationimmutableconversationsystem_promptnone-user_promptnone-system_prompt_argumentnone-user_prompt_argumentnone-chatnone-longterm_memorynone-metadatanone-active_agent-conversation_id",level:3},{value:"<em>property</em> conversation_id <em>: str</em>",id:"property-conversation_id--str",level:4},{value:"<em>property</em> active_agent",id:"property-active_agent",level:4},{value:"<em>property</em> chat <em>: list[ChatMessage]</em>",id:"property-chat--listchatmessage",level:4},{value:"<em>property</em> system_prompt <em>: ChatMessage</em>",id:"property-system_prompt--chatmessage",level:4},{value:"<em>property</em> user_prompt <em>: ChatMessage</em>",id:"property-user_prompt--chatmessage",level:4},{value:"<em>property</em> system_prompt_argument <em>: GenericSystemPromptArg</em>",id:"property-system_prompt_argument--genericsystempromptarg",level:4},{value:"<em>property</em> user_prompt_argument <em>: GenericUserPromptArg</em>",id:"property-user_prompt_argument--genericuserpromptarg",level:4},{value:"<em>property</em> metadata <em>: dict[str, str]</em>",id:"property-metadata--dictstr-str",level:4},{value:"<em>property</em> last_message <em>: ChatMessage</em>",id:"property-last_message--chatmessage",level:4},{value:"get_agent_longterm_memory(agent_name)",id:"get_agent_longterm_memoryagent_name",level:4},{value:"update_agent_longterm_memory(agent_name, longterm_memory)",id:"update_agent_longterm_memoryagent_name-longterm_memory",level:4},{value:"update_prompt_argument_with_longterm_memory(conductor_name)",id:"update_prompt_argument_with_longterm_memoryconductor_name",level:4},{value:"update(chat=None, system_prompt_argument=None, user_prompt_argument=None, system_prompt=None, user_prompt=None, longterm_memory=None, metadata=None, active_agent=None)",id:"updatechatnone-system_prompt_argumentnone-user_prompt_argumentnone-system_promptnone-user_promptnone-longterm_memorynone-metadatanone-active_agentnone",level:4},{value:"append(message, role=&#39;&#39;, name=&#39;&#39;)",id:"appendmessage-role-name",level:4},{value:"render_chat(message_type=MessageType.CONVERSATION)",id:"render_chatmessage_typemessagetypeconversation",level:4},{value:"is_empty()",id:"is_empty",level:4},{value:"has_pending_tool_call()",id:"has_pending_tool_call",level:4},{value:"has_pending_tool_response()",id:"has_pending_tool_response",level:4},{value:"<em>classmethod</em> from_dict(data, agents)",id:"classmethod-from_dictdata-agents",level:4},{value:"to_dict()",id:"to_dict",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"module-immutable-conversation",children:"Module: Immutable Conversation"})}),"\n",(0,r.jsxs)(n.h3,{id:"class-diskursimmutable_conversationimmutableconversationsystem_promptnone-user_promptnone-system_prompt_argumentnone-user_prompt_argumentnone-chatnone-longterm_memorynone-metadatanone-active_agent-conversation_id",children:[(0,r.jsx)(n.em,{children:"class"})," diskurs.immutable_conversation.ImmutableConversation(system_prompt=None, user_prompt=None, system_prompt_argument=None, user_prompt_argument=None, chat=None, longterm_memory=None, metadata=None, active_agent='', conversation_id='')"]}),"\n",(0,r.jsxs)(n.p,{children:["Bases: ",(0,r.jsx)(n.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,r.jsx)(n.code,{children:"Conversation"})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"system_prompt"})," (",(0,r.jsx)(n.em,{children:"ChatMessage"})," ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"user_prompt"})," (",(0,r.jsx)(n.em,{children:"ChatMessage"})," ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"system_prompt_argument"})," (",(0,r.jsx)(n.em,{children:"GenericSystemPromptArg"})," ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"user_prompt_argument"})," (",(0,r.jsx)(n.em,{children:"GenericUserPromptArg"})," ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"longterm_memory"})," (",(0,r.jsx)(n.em,{children:"dict"})," *[*",(0,r.jsx)(n.em,{children:"str"})," ",(0,r.jsx)(n.em,{children:","})," ",(0,r.jsx)(n.em,{children:"LongtermMemory"})," ",(0,r.jsx)(n.em,{children:"]"}),"  ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"metadata"})," (",(0,r.jsx)(n.em,{children:"dict"})," *[*",(0,r.jsx)(n.em,{children:"str"})," ",(0,r.jsx)(n.em,{children:","})," ",(0,r.jsx)(n.em,{children:"str"})," ",(0,r.jsx)(n.em,{children:"]"}),"  ",(0,r.jsx)(n.em,{children:"|"})," ",(0,r.jsx)(n.em,{children:"None"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"active_agent"})," (",(0,r.jsx)(n.em,{children:"str"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-conversation_id--str",children:[(0,r.jsx)(n.em,{children:"property"})," conversation_id ",(0,r.jsx)(n.em,{children:": str"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the unique identifier for the conversation."}),"\n",(0,r.jsx)(n.p,{children:"This method returns the conversation ID, which is a unique string\nused to identify the conversation instance. The conversation ID\nis typically used for tracking and managing conversations within\nthe system."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe unique identifier for the conversation."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-active_agent",children:[(0,r.jsx)(n.em,{children:"property"})," active_agent"]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the name of the active agent."}),"\n",(0,r.jsx)(n.p,{children:"The active agent is the agent currently responsible for processing the conversation.\nThis method returns the name of the active agent as a string."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe name of the active agent."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\nstr"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-chat--listchatmessage",children:[(0,r.jsx)(n.em,{children:"property"})," chat ",(0,r.jsx)(n.em,{children:": list[ChatMessage]"})]}),"\n",(0,r.jsx)(n.p,{children:"Provides a deep copy of the chat messages to ensure immutability."}),"\n",(0,r.jsx)(n.p,{children:"This method returns a list of ChatMessage objects representing the conversation\u2019s chat history.\nThe returned list is a deep copy, ensuring that the original chat messages remain unchanged."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA deep copy of the list of chat messages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\nList[ChatMessage]"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-system_prompt--chatmessage",children:[(0,r.jsx)(n.em,{children:"property"})," system_prompt ",(0,r.jsx)(n.em,{children:": ChatMessage"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the system prompt of the conversation."}),"\n",(0,r.jsx)(n.p,{children:"The system prompt is a message that sets the initial context or instructions for the conversation.\nIt is typically used to guide the conversation\u2019s flow and provide necessary background information.\nEach time an agent takes a turn in the conversation, it updates the system prompt accordingly."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe system prompt message if available, otherwise None."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-user_prompt--chatmessage",children:[(0,r.jsx)(n.em,{children:"property"})," user_prompt ",(0,r.jsx)(n.em,{children:": ChatMessage"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the user prompt of the conversation."}),"\n",(0,r.jsx)(n.p,{children:"The user prompt is a message that represents the user\u2019s input or query in the conversation.\nIt is typically used to direct the agent\u2019s next response.\nEach time an agent takes a turn in the conversation, it updates the user prompt accordingly."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe user prompt message if available, otherwise None."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-system_prompt_argument--genericsystempromptarg",children:[(0,r.jsx)(n.em,{children:"property"})," system_prompt_argument ",(0,r.jsx)(n.em,{children:": GenericSystemPromptArg"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the system prompt arguments."}),"\n",(0,r.jsx)(n.p,{children:"The system prompt argument is used to render the system prompt message.\nEach time an agent takes a turn in the conversation, it updates the system prompt argument."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe system prompt arguments if available, otherwise None."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-user_prompt_argument--genericuserpromptarg",children:[(0,r.jsx)(n.em,{children:"property"})," user_prompt_argument ",(0,r.jsx)(n.em,{children:": GenericUserPromptArg"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the user prompt arguments."}),"\n",(0,r.jsx)(n.p,{children:"The user prompt argument is used to render the user prompt message.\nEach time an agent takes a turn in the conversation, it updates the user prompt argument."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe user prompt arguments if available, otherwise None."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-metadata--dictstr-str",children:[(0,r.jsx)(n.em,{children:"property"})," metadata ",(0,r.jsx)(n.em,{children:": dict[str, str]"})]}),"\n",(0,r.jsx)(n.p,{children:"Provides a deep copy of the metadata dictionary to ensure immutability."}),"\n",(0,r.jsx)(n.p,{children:"The metadata dictionary contains additional information about the conversation,\nand can be freely defined and updated by the implementing system."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA deep copy of the metadata dictionary."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"property-last_message--chatmessage",children:[(0,r.jsx)(n.em,{children:"property"})," last_message ",(0,r.jsx)(n.em,{children:": ChatMessage"})]}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the last message in the conversation."}),"\n",(0,r.jsx)(n.p,{children:"This property returns the most recent ChatMessage object from the conversation\u2019s chat history.\nIt is used to access the latest message exchanged in the conversation, which can be useful for\ndetermining the current state or context of the conversation."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nThe last message in the chat."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\nChatMessage"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_agent_longterm_memoryagent_name",children:"get_agent_longterm_memory(agent_name)"}),"\n",(0,r.jsx)(n.p,{children:"Provides a deep copy of the long-term memory for the specified agent."}),"\n",(0,r.jsx)(n.p,{children:"This method retrieves the long-term memory associated with a given agent name.\nAllowing the caller to safely modify the returned memory without affecting the original."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(n.strong,{children:"agent_name"})," (",(0,r.jsx)(n.code,{children:"str"}),") \u2013 The name of the agent whose long-term memory is to be retrieved."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.code,{children:"LongtermMemory"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA deep copy of the agent\u2019s long-term memory, or None if no memory is found."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"update_agent_longterm_memoryagent_name-longterm_memory",children:"update_agent_longterm_memory(agent_name, longterm_memory)"}),"\n",(0,r.jsx)(n.p,{children:"Updates the long-term memory for a specific agent."}),"\n",(0,r.jsx)(n.p,{children:"This method updates the long-term memory associated with the given agent name.\nIt returns a new instance of the Conversation with the updated long-term memory,\nensuring immutability of the conversation state."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"agent_name"})," (",(0,r.jsx)(n.code,{children:"str"}),") \u2013 The name of the agent whose long-term memory is to be updated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"longterm_memory"})," (",(0,r.jsx)(n.code,{children:"LongtermMemory"}),") \u2013 The new long-term memory for the agent."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.a,{href:"#diskurs.immutable_conversation.ImmutableConversation",children:(0,r.jsx)(n.code,{children:"ImmutableConversation"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA new instance of the Conversation with updated long-term memory."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"update_prompt_argument_with_longterm_memoryconductor_name",children:"update_prompt_argument_with_longterm_memory(conductor_name)"}),"\n",(0,r.jsx)(n.p,{children:"Updates the prompt arguments with the long-term memory of the conductor agent."}),"\n",(0,r.jsx)(n.p,{children:"This method retrieves the long-term memory associated with the specified conductor agent\nand updates the prompt arguments of the conversation accordingly. It ensures that the\nconversation\u2019s state is updated with the relevant long-term memory data, preserving\nimmutability by returning a new instance of the Conversation."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(n.strong,{children:"conductor_name"})," (",(0,r.jsx)(n.code,{children:"str"}),") \u2013 The name of the conductor agent whose long-term memory is to be used."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.a,{href:"#diskurs.immutable_conversation.ImmutableConversation",children:(0,r.jsx)(n.code,{children:"ImmutableConversation"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA new instance of the Conversation with updated prompt arguments."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"updatechatnone-system_prompt_argumentnone-user_prompt_argumentnone-system_promptnone-user_promptnone-longterm_memorynone-metadatanone-active_agentnone",children:"update(chat=None, system_prompt_argument=None, user_prompt_argument=None, system_prompt=None, user_prompt=None, longterm_memory=None, metadata=None, active_agent=None)"}),"\n",(0,r.jsx)(n.p,{children:"Returns a new instance of Conversation with updated fields, preserving immutability."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"chat"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"list"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),"]]) \u2013 Optional list of ChatMessage objects representing the conversation\u2019s chat history."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"system_prompt_argument"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"TypeVar"}),"(",(0,r.jsx)(n.code,{children:"GenericSystemPromptArg"}),", bound= PromptArgument)]) \u2013 Optional system prompt argument to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"user_prompt_argument"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"TypeVar"}),"(",(0,r.jsx)(n.code,{children:"GenericUserPromptArg"}),", bound= PromptArgument)]) \u2013 Optional user prompt argument to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"system_prompt"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),"]) \u2013 Optional system prompt message to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"user_prompt"})," (",(0,r.jsx)(n.code,{children:"Union"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),", ",(0,r.jsx)(n.code,{children:"list"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),"], ",(0,r.jsx)(n.code,{children:"None"}),"]) \u2013 Optional user prompt message(s) to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"longterm_memory"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"dict"}),"[",(0,r.jsx)(n.code,{children:"str"}),", ",(0,r.jsx)(n.code,{children:"Any"}),"]]) \u2013 Optional dictionary of long-term memory to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"metadata"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"dict"}),"[",(0,r.jsx)(n.code,{children:"str"}),", ",(0,r.jsx)(n.code,{children:"str"}),"]]) \u2013 Optional dictionary of metadata to update."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"active_agent"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"str"}),"]) \u2013 Optional name of the active agent to update."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.a,{href:"#diskurs.immutable_conversation.ImmutableConversation",children:(0,r.jsx)(n.code,{children:"ImmutableConversation"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA new instance of the Conversation class with updated fields."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"appendmessage-role-name",children:"append(message, role='', name='')"}),"\n",(0,r.jsx)(n.p,{children:"Appends a new chat message and returns a new instance of Conversation."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"message"})," (",(0,r.jsx)(n.code,{children:"ChatMessage"})," | ",(0,r.jsx)(n.code,{children:"list"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),"]) \u2013 The ChatMessage object to be added to the conversation, alternatively a string can be provided."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"role"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"Role"}),"]) \u2013 Only needed if message is str, the role (system, user, assistant)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"})," (",(0,r.jsx)(n.code,{children:"Optional"}),"[",(0,r.jsx)(n.code,{children:"str"}),"]) \u2013 Only needed if message is str, name of the agent"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.a,{href:"#diskurs.immutable_conversation.ImmutableConversation",children:(0,r.jsx)(n.code,{children:"ImmutableConversation"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA new instance of Conversation with the appended message."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"render_chatmessage_typemessagetypeconversation",children:"render_chat(message_type=MessageType.CONVERSATION)"}),"\n",(0,r.jsx)(n.p,{children:"Returns the complete chat with the system prompt prepended and the user prompt appended."}),"\n",(0,r.jsx)(n.p,{children:"This method generates a list of ChatMessage objects representing the full chat history.\nIt includes the system prompt at the beginning and the user prompt at the end of the chat."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsx)(n.strong,{children:"message_type"})," (",(0,r.jsx)(n.code,{children:"MessageType"}),") \u2013 The type of message to be rendered. Defaults to MessageType.CONVERSATION."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.code,{children:"list"}),"[",(0,r.jsx)(n.code,{children:"ChatMessage"}),"]"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA list representing the full chat."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"is_empty",children:"is_empty()"}),"\n",(0,r.jsx)(n.p,{children:"Checks if the chat is empty."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.code,{children:"bool"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nTrue if the chat is empty, False otherwise."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"has_pending_tool_call",children:"has_pending_tool_call()"}),"\n",(0,r.jsx)(n.p,{children:"Checks if there is a pending tool call in the conversation."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nTrue if there is a pending tool call, False otherwise."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"has_pending_tool_response",children:"has_pending_tool_response()"}),"\n",(0,r.jsx)(n.p,{children:"Checks if there is a pending tool response in the conversation,\nthis would be the case if the last message was a tool call from\nthe LLM."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.code,{children:"bool"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nTrue if there is a pending tool response, False otherwise."]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"classmethod-from_dictdata-agents",children:[(0,r.jsx)(n.em,{children:"classmethod"})," from_dict(data, agents)"]}),"\n",(0,r.jsx)(n.p,{children:"Creates a Conversation instance from a dictionary."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"data"})," (",(0,r.jsx)(n.code,{children:"dict"}),"[",(0,r.jsx)(n.code,{children:"str"}),", ",(0,r.jsx)(n.code,{children:"Any"}),"]) \u2013 The data dictionary."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"agents"})," (",(0,r.jsx)(n.code,{children:"list"}),") \u2013 A list of agent instances."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA new instance of Conversation."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"to_dict",children:"to_dict()"}),"\n",(0,r.jsx)(n.p,{children:"Converts the Conversation instance to a dictionary."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return type:"}),"\n",(0,r.jsx)(n.code,{children:"dict"}),"[",(0,r.jsx)(n.code,{children:"str"}),", ",(0,r.jsx)(n.code,{children:"Any"}),"]"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nA dictionary representation of the Conversation."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);