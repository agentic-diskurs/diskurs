"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[5051],{6959:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"conductor_agent","title":"Module: Conductor Agent","description":"class diskurs.conductoragent.ConductorAgent(name, prompt, llmclient, topics, agentdescriptions, finalizername, dispatcher=None, maxtrials=5, maxdispatches=50)","source":"@site/docs/conductor_agent.md","sourceDirName":".","slug":"/conductor_agent","permalink":"/diskurs/docs/conductor_agent","draft":false,"unlisted":false,"editUrl":"https://github.com/agentic-diskurs/diskurs/edit/main/docs-site/docs/conductor_agent.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Translate your site","permalink":"/diskurs/docs/tutorial-extras/translate-your-site"},"next":{"title":"Module: Dispatcher","permalink":"/diskurs/docs/dispatcher"}}');var t=n(4848),o=n(8453);const i={},c="Module: Conductor Agent",a={},d=[{value:"<em>class</em> diskurs.conductor_agent.ConductorAgent(name, prompt, llm_client, topics, agent_descriptions, finalizer_name, dispatcher=None, max_trials=5, max_dispatches=50)",id:"class-diskursconductor_agentconductoragentname-prompt-llm_client-topics-agent_descriptions-finalizer_name-dispatchernone-max_trials5-max_dispatches50",level:3},{value:"<em>classmethod</em> create(name, **kwargs)",id:"classmethod-createname-kwargs",level:4},{value:"<em>static</em> update_longterm_memory(source, target, overwrite)",id:"static-update_longterm_memorysource-target-overwrite",level:4},{value:"<em>static</em> is_previous_agent_conductor(conversation)",id:"static-is_previous_agent_conductorconversation",level:4},{value:"create_or_update_longterm_memory(conversation, overwrite=False)",id:"create_or_update_longterm_memoryconversation-overwritefalse",level:4},{value:"invoke(conversation)",id:"invokeconversation",level:4},{value:"finalize(conversation)",id:"finalizeconversation",level:4},{value:"fail(conversation)",id:"failconversation",level:4},{value:"process_conversation(conversation)",id:"process_conversationconversation",level:4},{value:"generate_validated_response(conversation, message_type=MessageType.CONVERSATION)",id:"generate_validated_responseconversation-message_typemessagetypeconversation",level:4},{value:"prepare_conversation(conversation, system_prompt_argument, user_prompt_argument, message_type=MessageType.CONVERSATION)",id:"prepare_conversationconversation-system_prompt_argument-user_prompt_argument-message_typemessagetypeconversation",level:4},{value:"register_dispatcher(dispatcher)",id:"register_dispatcherdispatcher",level:4},{value:"return_fail_validation_message(response)",id:"return_fail_validation_messageresponse",level:4},{value:"<em>property</em> topics <em>: list[str]</em>",id:"property-topics--liststr",level:4},{value:"name <em>: <code>str</code></em>",id:"name--str",level:4},{value:"prompt <em>: <code>ConductorPrompt</code></em>",id:"prompt--conductorprompt",level:4}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"module-conductor-agent",children:"Module: Conductor Agent"})}),"\n",(0,t.jsxs)(s.h3,{id:"class-diskursconductor_agentconductoragentname-prompt-llm_client-topics-agent_descriptions-finalizer_name-dispatchernone-max_trials5-max_dispatches50",children:[(0,t.jsx)(s.em,{children:"class"})," diskurs.conductor_agent.ConductorAgent(name, prompt, llm_client, topics, agent_descriptions, finalizer_name, dispatcher=None, max_trials=5, max_dispatches=50)"]}),"\n",(0,t.jsxs)(s.p,{children:["Bases: ",(0,t.jsx)(s.code,{children:"BaseAgent"}),"[",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConductorPrompt",children:(0,t.jsx)(s.code,{children:"ConductorPrompt"})}),"], ",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConductorAgent",children:(0,t.jsx)(s.code,{children:"ConductorAgent"})})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.em,{children:"str"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"prompt"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConductorPrompt",children:(0,t.jsx)(s.em,{children:"ConductorPrompt"})}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"llm_client"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.LLMClient",children:(0,t.jsx)(s.em,{children:"LLMClient"})}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"topics"})," (",(0,t.jsx)(s.em,{children:"list"})," *[*",(0,t.jsx)(s.em,{children:"str"})," ",(0,t.jsx)(s.em,{children:"]"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"agent_descriptions"})," (",(0,t.jsx)(s.em,{children:"dict"})," *[*",(0,t.jsx)(s.em,{children:"str"})," ",(0,t.jsx)(s.em,{children:","})," ",(0,t.jsx)(s.em,{children:"str"})," ",(0,t.jsx)(s.em,{children:"]"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"finalizer_name"})," (",(0,t.jsx)(s.em,{children:"str"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"dispatcher"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConversationDispatcher",children:(0,t.jsx)(s.em,{children:"ConversationDispatcher"})})," ",(0,t.jsx)(s.em,{children:"|"})," ",(0,t.jsx)(s.em,{children:"None"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"max_trials"})," (",(0,t.jsx)(s.em,{children:"int"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"max_dispatches"})," (",(0,t.jsx)(s.em,{children:"int"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"classmethod-createname-kwargs",children:[(0,t.jsx)(s.em,{children:"classmethod"})," create(name, **kwargs)"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"Self"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"name"})," (",(0,t.jsx)(s.em,{children:"str"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"static-update_longterm_memorysource-target-overwrite",children:[(0,t.jsx)(s.em,{children:"static"})," update_longterm_memory(source, target, overwrite)"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"LongtermMemory"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"source"})," (",(0,t.jsx)(s.em,{children:"LongtermMemory"})," ",(0,t.jsx)(s.em,{children:"|"})," ",(0,t.jsx)(s.em,{children:"PromptArgument"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"target"})," (",(0,t.jsx)(s.em,{children:"LongtermMemory"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"overwrite"})," (",(0,t.jsx)(s.em,{children:"bool"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"static-is_previous_agent_conductorconversation",children:[(0,t.jsx)(s.em,{children:"static"})," is_previous_agent_conductor(conversation)"]}),"\n",(0,t.jsx)(s.h4,{id:"create_or_update_longterm_memoryconversation-overwritefalse",children:"create_or_update_longterm_memory(conversation, overwrite=False)"}),"\n",(0,t.jsx)(s.p,{children:"Creates or updates the long-term memory for the conductor agent."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for either creating a new long-term memory instance\nor updating an existing one based on the provided conversation. It ensures that\nthe long-term memory is synchronized with the current state of the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The current state of the conversation, represented as a Conversation object."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"overwrite"})," (",(0,t.jsx)(s.code,{children:"bool"}),") \u2013 A boolean flag indicating whether to overwrite existing memory fields. Defaults to False."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn updated Conversation object with the new or updated long-term memory."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"invokeconversation",children:"invoke(conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Run the agent on a conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method processes the given conversation by invoking the agent\u2019s logic.\nIt takes a Conversation object representing the conversation\nand returns an updated Conversation object after processing."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The current state of the conversation, represented as a Conversation object"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nAn updated Conversation object with the processed state."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"finalizeconversation",children:"finalize(conversation)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.em,{children:"Conversation"})}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"failconversation",children:"fail(conversation)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"dict"}),"[",(0,t.jsx)(s.code,{children:"str"}),", ",(0,t.jsx)(s.code,{children:"Any"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.em,{children:"Conversation"})}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"process_conversationconversation",children:"process_conversation(conversation)"}),"\n",(0,t.jsx)(s.p,{children:"Receives a conversation from the dispatcher, i.e. message bus, processes it and finally publishes\na deep copy of the resulting conversation back to the dispatcher."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The conversation object to process."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"generate_validated_responseconversation-message_typemessagetypeconversation",children:"generate_validated_response(conversation, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Generates a validated response for the given conversation."}),"\n",(0,t.jsx)(s.p,{children:"This method attempts to generate a valid response for the conversation by\ninteracting with the LLM client and validating the response. It performs\nmultiple trials if necessary, and handles tool calls and corrective messages."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 The conversation object to generate a response for."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to render the user prompt as, defaults to MessageType.CONVERSATION."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nThe updated conversation object with the validated response."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"prepare_conversationconversation-system_prompt_argument-user_prompt_argument-message_typemessagetypeconversation",children:"prepare_conversation(conversation, system_prompt_argument, user_prompt_argument, message_type=MessageType.CONVERSATION)"}),"\n",(0,t.jsx)(s.p,{children:"Ensures the conversation is in a valid state by creating a new set of prompts\nand prompt_variables for system and user, as well creating a fresh copy of the conversation."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"conversation"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})}),") \u2013 A conversation object, possible passed from another agent\nor a string to start a new conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"system_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The system prompt argument to use for the system prompt."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"user_prompt_argument"})," (",(0,t.jsx)(s.code,{children:"PromptArgument"}),") \u2013 The user prompt argument to use for the user prompt."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"message_type"})," (",(0,t.jsx)(s.code,{children:"MessageType"}),") \u2013 The type of message to render the user prompt as."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.Conversation",children:(0,t.jsx)(s.code,{children:"Conversation"})})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Returns:"}),"\nA deep copy of the conversation, in a valid state for this agent"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"register_dispatcherdispatcher",children:"register_dispatcher(dispatcher)"}),"\n",(0,t.jsx)(s.p,{children:"Registers a dispatcher with the conversation participant."}),"\n",(0,t.jsx)(s.p,{children:"This method is responsible for associating a ConversationDispatcher with the\nconversation participant. The dispatcher will handle the distribution and management\nof conversations involving this participant."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),"\n",(0,t.jsx)(s.strong,{children:"dispatcher"})," (",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConversationDispatcher",children:(0,t.jsx)(s.code,{children:"ConversationDispatcher"})}),") \u2013 The ConversationDispatcher instance to be registered."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Return type:"}),"\n",(0,t.jsx)(s.code,{children:"None"})]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"return_fail_validation_messageresponse",children:"return_fail_validation_message(response)"}),"\n",(0,t.jsxs)(s.h4,{id:"property-topics--liststr",children:[(0,t.jsx)(s.em,{children:"property"})," topics ",(0,t.jsx)(s.em,{children:": list[str]"})]}),"\n",(0,t.jsxs)(s.h4,{id:"name--str",children:["name ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.code,{children:"str"})]})]}),"\n",(0,t.jsxs)(s.h4,{id:"prompt--conductorprompt",children:["prompt ",(0,t.jsxs)(s.em,{children:[": ",(0,t.jsx)(s.a,{href:"/diskurs/docs/protocols#diskurs.protocols.ConductorPrompt",children:(0,t.jsx)(s.code,{children:"ConductorPrompt"})})]})]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(6540);const t={},o=r.createContext(t);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);