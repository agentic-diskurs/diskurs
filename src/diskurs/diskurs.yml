first_contact: "conductor_agent"
toolExecutorType: "default"
dispatcherType: "synchronous"
customModules:
  - "conductor_agent.py"
  - "multistep_agent.py"
agents:
  - name: "finalizer_agent"
    type: "finalizer"
    foo: "bar"
  - name: "conductor_agent"
    type: "conductor"
    llm: "gpt-4-switzerland-north"
    prompt:
      type: "conductor_prompt"
      location: "conductor_agent"
      userPromptArgumentClass: "ConductorUserPromptArgument"
      systemPromptArgumentClass: "ConductorSystemPromptArgument"
      longtermMemoryClass: "MyConductorLongtermMemory"
      canFinalizeName: "can_finalize"
      finalizerName: "finalizer_agent"
    topics:
      - "first_agent"
      - "second_agent"
    finalizerName: "finalizer_agent"
  - name: "first_agent"
    type: "multistep"
    llm: "gpt-4-switzerland-north"
    prompt:
      type: "multistep_prompt"
      location: "my_agents/first_agent"
      userPromptArgumentClass: "FirstSystemPromptArgument"
      systemPromptArgumentClass: "FirstUserPromptArgument"
      isValidName: "is_valid"
      isFinalName: "is_final"
    tools:
      - "example_tool1"
      - "example_tool2"
    topics:
      - "conductor_agent"
  - name: "second_agent"
    type: "multistep"
    llm: "gpt-4-switzerland-north"
    prompt:
      type: "multistep_prompt"
      location: "my_agents/second_agent"
      userPromptArgumentClass: "SecondUserPromptArgument"
      systemPromptArgumentClass: "SecondSystemPromptArgument"
      isValidName: "is_valid"
      isFinalName: "is_final"
    tools:
      - "example_tool1"
      - "example_tool2"
    topics:
        - "conductor_agent"

llms:
  - name: "gpt-4-switzerland-north"
    type: "azure"
    modelName: "gpt-4-0613"
    endpoint: "https://osdp-enabling-openai.openai.azure.com"
    apiVersion: "2023-03-15-preview"
    apiKey: "${AZURE_OPENAI_API_KEY}"

tools:
  - name: "example_tool1"
    functionName: "my_func1"
    modulePath: "my_tools/example_tools.py"
  - name: "example_tool2"
    functionName: "my_func2"
    modulePath: "my_tools/example_tools.py"
    configs:
      foo: "bar"
      baz: "qux"
