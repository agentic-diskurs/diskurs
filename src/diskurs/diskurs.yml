first_contact: "conductor_agent"
toolExecutorType: "default"
dispatcherType: "synchronous"
agents:
  - name: "conductor_agent"
    type: "conductor"
    llm: "gpt-4-switzerland-north"
    prompt:
      promptAssets: "conductor_agent"
      userPromptArgumentClass: "ConductorUserPromptArgument"
      systemPromptArgumentClass: "ConductorSystemPromptArgument"
    additionalArguments:
      topics:
        - "first_agent"
        - "second_agent"
  - name: "first_agent"
    type: "multistep"
    llm: "gpt-4-switzerland-north"
    prompt:
      promptAssets: "my_agents/first_agent"
      userPromptArgumentClass: "FirstSystemPromptArgument"
      systemPromptArgumentClass: "FirstUserPromptArgument"
    additionalArguments:
      tools:
        - "example_tool1"
        - "example_tool2"
      topics:
        - "second_agent"
  - name: "second_agent"
    type: "multistep"
    llm: "gpt-4-switzerland-north"
    prompt:
      promptAssets: "my_agents/second_agent"
      userPromptArgumentClass: "SecondUserPromptArgument"
      systemPromptArgumentClass: "SecondSystemPromptArgument"
    additionalArguments:
      tools:
        - "example_tool1"
        - "example_tool2"
      topics:
          - "first_agent"

llms:
  - name: "gpt-4-switzerland-north"
    type: "azure"
    additionalArguments:
      modelName: "gpt-4-0613"
      endpoint: "https://osdp-enabling-openai.openai.azure.com"
      apiVersion: "2023-03-15-preview"
      apiKey: "${AZURE_OPENAI_API_KEY}"

tools:
  - name: "example_tool1"
    functionName: "my_func1"
    modulePath: "my_tools/example_tools.py"
  - name: "example_tool2"
    functionName: "my_func2"
    modulePath: "my_tools/example_tools.py"
    configs:
      foo: "bar"
      baz: "qux"
